{"ast":null,"code":"var _jsxFileName = \"/Users/jingjing/NEU_Align_CS/CS5610 Web Dev/Jingjing-Liao-project2/jingjing-liao-project2/src/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport ComputerSquare from \"./ComputerSquare\";\nimport HumanSquanre from \"./HumanSquare\";\nimport \"./Board.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst totalShip = 5;\nlet computerCount = 0;\nlet humanCount = 0;\nlet turn = 0; // let noneDisplay = \"noneDisplay\";\n// let display = \"display\";\n// let computerDisplay = display;\n// let humanDisplay = noneDisplay;\n\nlet computerBoard = randomlyChooseFiveShips([[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]);\nlet humanBoard = randomlyChooseFiveShips([[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]);\nexport default function Board() {\n  _s();\n\n  const [computerBoardState, setComputerBoard] = useState(computerBoard);\n  const computerBoardComponent = [];\n\n  for (let i = 0; i < computerBoardState.length; i++) {\n    let row = computerBoardState[i];\n\n    for (let j = 0; j < row.length; j++) {\n      computerBoardComponent.push( /*#__PURE__*/_jsxDEV(ComputerSquare, {\n        symbol: computerBoardState[i][j],\n        onClick: setComputerBoard,\n        boardState: computerBoardState,\n        x: i,\n        y: j\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this));\n\n      if (computerBoardState[i][j] === \"X\") {\n        humanCount++;\n      }\n    }\n  }\n\n  const [humanBoardState, setHumanBoard] = useState(humanBoard);\n  const humanBoardComponent = [];\n\n  for (let i = 0; i < humanBoardState.length; i++) {\n    let row = humanBoardState[i];\n\n    for (let j = 0; j < row.length; j++) {\n      humanBoardComponent.push( /*#__PURE__*/_jsxDEV(HumanSquanre, {\n        symbol: humanBoardState[i][j],\n        onClick: setHumanBoard,\n        boardState: humanBoardState,\n        x: i,\n        y: j\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this));\n\n      if (humanBoardState[i][j] === \"X\") {\n        computerCount++;\n      }\n    }\n  }\n\n  if (turn === 0) {\n    turn = 1;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"count\",\n        children: [\"Human: \", humanCount, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"computerCount\",\n          children: [\"Computer: \", computerCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"turn\",\n          children: \"Human's Turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"board\",\n          children: computerBoardComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  } else {\n    turn = 0; // AI set human board\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"count\",\n        children: [\"Human: \", humanCount, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n          class: \"computerCount\",\n          children: [\"Computer: \", computerCount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          class: \"turn\",\n          children: \"Computer's Turn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"board\",\n          children: humanBoardComponent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(Board, \"xJHzVcULXjgOM5HbUAQNGZlyTis=\");\n\n_c = Board;\n\nfunction RandomlyPickByAI(board) {\n  let rowPos = newArray[Math.floor(Math.random() * board.length)];\n  let colPos = newArray[Math.floor(Math.random() * board.length)];\n}\n\n_c2 = RandomlyPickByAI;\n\nfunction randomlyChooseFiveShips(board) {\n  let newArray = [];\n\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n\n  while (shipCount != totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n\n  return board;\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Board\");\n$RefreshReg$(_c2, \"RandomlyPickByAI\");","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/CS5610 Web Dev/Jingjing-Liao-project2/jingjing-liao-project2/src/Board.jsx"],"names":["ComputerSquare","HumanSquanre","useState","totalShip","computerCount","humanCount","turn","computerBoard","randomlyChooseFiveShips","humanBoard","Board","computerBoardState","setComputerBoard","computerBoardComponent","i","length","row","j","push","humanBoardState","setHumanBoard","humanBoardComponent","RandomlyPickByAI","board","rowPos","newArray","Math","floor","random","colPos","shipCount"],"mappings":"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","sourcesContent":["import ComputerSquare from \"./ComputerSquare\";\nimport HumanSquanre from \"./HumanSquare\";\nimport \"./Board.css\";\nimport { useState } from \"react\";\n\nconst totalShip = 5;\nlet computerCount = 0;\nlet humanCount = 0;\nlet turn = 0;\n// let noneDisplay = \"noneDisplay\";\n// let display = \"display\";\n// let computerDisplay = display;\n// let humanDisplay = noneDisplay;\nlet computerBoard = randomlyChooseFiveShips([\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n]);\n\nlet humanBoard = randomlyChooseFiveShips([\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n]);\n\nexport default function Board() {\n  const [computerBoardState, setComputerBoard] = useState(computerBoard);\n  const computerBoardComponent = [];\n\n  for (let i = 0; i < computerBoardState.length; i++) {\n    let row = computerBoardState[i];\n    for (let j = 0; j < row.length; j++) {\n      computerBoardComponent.push(\n        <ComputerSquare\n          symbol={computerBoardState[i][j]}\n          onClick={setComputerBoard}\n          boardState={computerBoardState}\n          x={i}\n          y={j}\n        />\n      );\n      if (computerBoardState[i][j] === \"X\") {\n        humanCount++;\n      }\n    }\n  }\n\n  const [humanBoardState, setHumanBoard] = useState(humanBoard);\n  const humanBoardComponent = [];\n\n  for (let i = 0; i < humanBoardState.length; i++) {\n    let row = humanBoardState[i];\n    for (let j = 0; j < row.length; j++) {\n      humanBoardComponent.push(\n        <HumanSquanre\n          symbol={humanBoardState[i][j]}\n          onClick={setHumanBoard}\n          boardState={humanBoardState}\n          x={i}\n          y={j}\n        />\n      );\n      if (humanBoardState[i][j] === \"X\") {\n        computerCount++;\n      }\n    }\n  }\n\n  if (turn === 0) {\n    turn = 1;\n    return (\n      <div>\n        <div class=\"count\">\n          Human: {humanCount}{\" \"}\n          <span class=\"computerCount\">Computer: {computerCount}</span>\n        </div>\n\n        <div>\n          <div class=\"turn\">Human's Turn</div>\n          <div id=\"board\">{computerBoardComponent}</div>\n        </div>\n      </div>\n    );\n  } else {\n    turn = 0;\n    // AI set human board\n    return (\n      <div>\n        <div class=\"count\">\n          Human: {humanCount}{\" \"}\n          <span class=\"computerCount\">Computer: {computerCount}</span>\n        </div>\n\n        <div>\n          <div class=\"turn\">Computer's Turn</div>\n          <div id=\"board\">{humanBoardComponent}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction RandomlyPickByAI(board) {\n    let rowPos = newArray[Math.floor(Math.random() * board.length)];\n    let colPos = newArray[Math.floor(Math.random() * board.length)];\n}\n\nfunction randomlyChooseFiveShips(board) {\n  let newArray = [];\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n  while (shipCount != totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n  return board;\n}\n"]},"metadata":{},"sourceType":"module"}