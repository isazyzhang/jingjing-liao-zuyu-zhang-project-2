{"ast":null,"code":"var _jsxFileName = \"/Users/jingjing/NEU_Align_CS/CS5610 Web Dev/Jingjing-Liao-project2/jingjing-liao-project2/src/Board.jsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport ComputerSquare from \"./ComputerSquare\";\nimport HumanSquanre from \"./HumanSquare\";\nimport \"./Board.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst totalShip = 5; // let noneDisplay = \"noneDisplay\";\n// let display = \"display\";\n// let computerDisplay = display;\n// let humanDisplay = noneDisplay;\n\nexport default function Board() {\n  _s();\n\n  let humanBoard = randomlyChooseFiveShips([[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]);\n  const [humanBoardState, setHumanBoard] = useState(humanBoard);\n  const humanBoardComponent = [];\n  let computerCount = 0;\n\n  for (let i = 0; i < humanBoardState.length; i++) {\n    let row = humanBoardState[i];\n\n    for (let j = 0; j < row.length; j++) {\n      humanBoardComponent.push( /*#__PURE__*/_jsxDEV(HumanSquanre, {\n        symbol: humanBoardState[i][j],\n        onClick: setHumanBoard,\n        boardState: humanBoardState,\n        x: i,\n        y: j\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this));\n\n      if (humanBoardState[i][j] === \"X\") {\n        computerCount++;\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"count\",\n      children: [\"Human: \", 5, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"computerCount\",\n        children: [\"Computer: \", 5]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"turn\",\n        children: \"Computer's Turn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"board\",\n        children: humanBoardComponent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"+gnBpeDyTCfhf7dB0jwsPobvtRY=\");\n\n_c = Board;\n\nfunction computerBoard() {\n  _s2();\n\n  let computerBoard = randomlyChooseFiveShips([[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]);\n  const [computerBoardState, setComputerBoard] = useState(computerBoard);\n  const computerBoardComponent = [];\n  let humanCount = 0;\n\n  for (let i = 0; i < computerBoardState.length; i++) {\n    let row = computerBoardState[i];\n\n    for (let j = 0; j < row.length; j++) {\n      computerBoardComponent.push( /*#__PURE__*/_jsxDEV(ComputerSquare, {\n        symbol: computerBoardState[i][j],\n        onClick: setComputerBoard,\n        boardState: computerBoardState,\n        x: i,\n        y: j\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this));\n\n      if (computerBoardState[i][j] === \"X\") {\n        humanCount++;\n      }\n    }\n  }\n}\n\n_s2(computerBoard, \"YronJPeVMjXhPsxchli3xZDGdt8=\");\n\nfunction humanBoard() {}\n\nfunction randomlyChooseFiveShips(board) {\n  let newArray = [];\n\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n\n  while (shipCount != totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n\n  return board;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/CS5610 Web Dev/Jingjing-Liao-project2/jingjing-liao-project2/src/Board.jsx"],"names":["ComputerSquare","HumanSquanre","useState","totalShip","Board","humanBoard","randomlyChooseFiveShips","humanBoardState","setHumanBoard","humanBoardComponent","computerCount","i","length","row","j","push","computerBoard","computerBoardState","setComputerBoard","computerBoardComponent","humanCount","board","newArray","shipCount","rowPos","Math","floor","random","colPos"],"mappings":"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","sourcesContent":["import ComputerSquare from \"./ComputerSquare\";\nimport HumanSquanre from \"./HumanSquare\";\nimport \"./Board.css\";\nimport { useState } from \"react\";\n\nconst totalShip = 5;\n// let noneDisplay = \"noneDisplay\";\n// let display = \"display\";\n// let computerDisplay = display;\n// let humanDisplay = noneDisplay;\n\nexport default function Board() {\n  let humanBoard = randomlyChooseFiveShips([\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n  ]);\n  const [humanBoardState, setHumanBoard] = useState(humanBoard);\n\n  const humanBoardComponent = [];\n  let computerCount = 0;\n\n  for (let i = 0; i < humanBoardState.length; i++) {\n    let row = humanBoardState[i];\n    for (let j = 0; j < row.length; j++) {\n      humanBoardComponent.push(\n        <HumanSquanre\n          symbol={humanBoardState[i][j]}\n          onClick={setHumanBoard}\n          boardState={humanBoardState}\n          x={i}\n          y={j}\n        />\n      );\n      if (humanBoardState[i][j] === \"X\") {\n        computerCount++;\n      }\n    }\n  }\n\n  return (\n    <div>\n      <div class=\"count\">\n        Human: {5} <span class=\"computerCount\">Computer: {5}</span>\n      </div>\n\n      {/* <div>\n        <div class=\"turn\">Human's Turn</div>\n        <div id=\"board\">{computerBoardComponent}</div>\n      </div> */}\n\n      <div>\n        <div class=\"turn\">Computer's Turn</div>\n        <div id=\"board\">{humanBoardComponent}</div>\n      </div>\n    </div>\n  );\n}\n\nfunction computerBoard() {\n  let computerBoard = randomlyChooseFiveShips([\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n  ]);\n  const [computerBoardState, setComputerBoard] = useState(computerBoard);\n\n  const computerBoardComponent = [];\n  let humanCount = 0;\n\n  for (let i = 0; i < computerBoardState.length; i++) {\n    let row = computerBoardState[i];\n    for (let j = 0; j < row.length; j++) {\n      computerBoardComponent.push(\n        <ComputerSquare\n          symbol={computerBoardState[i][j]}\n          onClick={setComputerBoard}\n          boardState={computerBoardState}\n          x={i}\n          y={j}\n        />\n      );\n      if (computerBoardState[i][j] === \"X\") {\n        humanCount++;\n      }\n    }\n  }\n}\n\nfunction humanBoard() {}\n\nfunction randomlyChooseFiveShips(board) {\n  let newArray = [];\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n  while (shipCount != totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n  return board;\n}\n"]},"metadata":{},"sourceType":"module"}