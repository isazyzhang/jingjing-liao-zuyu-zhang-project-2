{"ast":null,"code":"import { cloneDeep } from 'lodash';\nconst initialBoard = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]];\nconst defaultState = {\n  count: 0,\n  gameBoard: randomlyChooseFiveShips(initialBoard)\n};\nexport default function gameReducer(state, action) {\n  if (state === undefined) {\n    return defaultState;\n  }\n\n  if (action.type === \"computerBoardClick\") {\n    const value = state.gameBoard[action.x][action.y];\n\n    if (value === \"Ship\") {\n      state.gameBoard[action.x][action.y] = \"X\";\n      state.count++;\n    } else if (value === \"\") {\n      // TODO: There is a library called immutable for React. Try it.\n      const copy = cloneDeep(state.gameBoard);\n      copy[action.x][action.y] = \"✓\";\n      state.gameBoard = copy;\n    }\n\n    return { ...state\n    };\n  }\n\n  if (action.type === 'RESET') {\n    state.gameBoard = defaultState.gameBoard;\n    state.count = 0;\n    return { ...state\n    };\n  }\n\n  return state;\n}\n\nfunction randomlyChooseFiveShips(board) {\n  const totalShip = 5;\n  let newArray = [];\n\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n\n  while (shipCount !== totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n\n  return board;\n}","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/jingjing-liao-project2 Redux Michael/src/reducers/gameReducer.js"],"names":["cloneDeep","initialBoard","defaultState","count","gameBoard","randomlyChooseFiveShips","gameReducer","state","action","undefined","type","value","x","y","copy","board","totalShip","newArray","i","length","push","shipCount","rowPos","Math","floor","random","colPos"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AAGA,MAAMC,YAAY,GAAG,CACnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADmB,EAEnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAFmB,EAGnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAHmB,CAArB;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,SAAS,EAAEC,uBAAuB,CAACJ,YAAD;AAFf,CAArB;AAKA,eAAe,SAASK,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAG/C,MAAID,KAAK,KAAKE,SAAd,EAAyB;AACrB,WAAOP,YAAP;AACH;;AACD,MAAIM,MAAM,CAACE,IAAP,KAAgB,oBAApB,EAA0C;AACtC,UAAMC,KAAK,GAAGJ,KAAK,CAACH,SAAN,CAAgBI,MAAM,CAACI,CAAvB,EAA0BJ,MAAM,CAACK,CAAjC,CAAd;;AACA,QAAIF,KAAK,KAAK,MAAd,EAAsB;AAClBJ,MAAAA,KAAK,CAACH,SAAN,CAAgBI,MAAM,CAACI,CAAvB,EAA0BJ,MAAM,CAACK,CAAjC,IAAsC,GAAtC;AACAN,MAAAA,KAAK,CAACJ,KAAN;AACH,KAHD,MAGO,IAAIQ,KAAK,KAAK,EAAd,EAAkB;AACrB;AACA,YAAMG,IAAI,GAAGd,SAAS,CAACO,KAAK,CAACH,SAAP,CAAtB;AACAU,MAAAA,IAAI,CAACN,MAAM,CAACI,CAAR,CAAJ,CAAeJ,MAAM,CAACK,CAAtB,IAA2B,GAA3B;AACAN,MAAAA,KAAK,CAACH,SAAN,GAAkBU,IAAlB;AACH;;AACD,WAAO,EAAC,GAAGP;AAAJ,KAAP;AACH;;AACD,MAAIC,MAAM,CAACE,IAAP,KAAgB,OAApB,EAA6B;AACzBH,IAAAA,KAAK,CAACH,SAAN,GAAkBF,YAAY,CAACE,SAA/B;AACAG,IAAAA,KAAK,CAACJ,KAAN,GAAc,CAAd;AACA,WAAO,EAAC,GAAGI;AAAJ,KAAP;AACH;;AACD,SAAOA,KAAP;AACH;;AAED,SAASF,uBAAT,CAAiCU,KAAjC,EAAwC;AACpC,QAAMC,SAAS,GAAG,CAAlB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,IAAAA,QAAQ,CAACG,IAAT,CAAcF,CAAd;AACD;;AAED,MAAIG,SAAS,GAAG,CAAhB;;AACA,SAAOA,SAAS,KAAKL,SAArB,EAAgC;AAC9B,QAAIM,MAAM,GAAGL,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,QAAQ,CAACE,MAApC,CAAD,CAArB;AACA,QAAIO,MAAM,GAAGT,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,QAAQ,CAACE,MAApC,CAAD,CAArB;;AACA,QAAIJ,KAAK,CAACO,MAAD,CAAL,CAAcI,MAAd,MAA0B,EAA9B,EAAkC;AAChCX,MAAAA,KAAK,CAACO,MAAD,CAAL,CAAcI,MAAd,IAAwB,MAAxB;AACAL,MAAAA,SAAS,IAAI,CAAb;AACD;AACF;;AACD,SAAON,KAAP;AACD","sourcesContent":["import { cloneDeep } from 'lodash';\n\n\nconst initialBoard = [\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n]\n\nconst defaultState = {\n  count: 0,\n  gameBoard: randomlyChooseFiveShips(initialBoard)\n}\n\nexport default function gameReducer(state, action) {\n\n    \n    if (state === undefined) {\n        return defaultState;\n    }\n    if (action.type === \"computerBoardClick\") {\n        const value = state.gameBoard[action.x][action.y]\n        if (value === \"Ship\") {\n            state.gameBoard[action.x][action.y] = \"X\"\n            state.count++\n        } else if (value === \"\") {\n            // TODO: There is a library called immutable for React. Try it.\n            const copy = cloneDeep(state.gameBoard);\n            copy[action.x][action.y] = \"✓\";\n            state.gameBoard = copy;\n        }\n        return {...state}\n    }\n    if (action.type === 'RESET') {\n        state.gameBoard = defaultState.gameBoard\n        state.count = 0\n        return {...state};\n    }\n    return state;\n}\n\nfunction randomlyChooseFiveShips(board) {\n    const totalShip = 5;\n    let newArray = [];\n    for (let i = 0; i < board.length; i++) {\n      newArray.push(i);\n    }\n  \n    let shipCount = 0;\n    while (shipCount !== totalShip) {\n      let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n      let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n      if (board[rowPos][colPos] === \"\") {\n        board[rowPos][colPos] = \"Ship\";\n        shipCount += 1;\n      }\n    }\n    return board;\n  }"]},"metadata":{},"sourceType":"module"}