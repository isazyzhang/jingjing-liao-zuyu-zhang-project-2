{"ast":null,"code":"import { cloneDeep } from \"lodash\";\nconst initialBoard = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]];\nconst initState = {\n  count: 0,\n  gameBoard: randomlyChooseFiveShips(initialBoard)\n};\nexport default function computerBoardReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === \"boardClick\") {\n    const value = state.gameBoard[action.x][action.y];\n\n    if (value === \"Ship\") {\n      state.gameBoard[action.x][action.y] = \"X\";\n      state.count++;\n    } else if (value === \"\") {\n      const copy = cloneDeep(state.gameBoard);\n      copy[action.x][action.y] = \"⚫\";\n      state.gameBoard = copy;\n    }\n\n    return { ...state\n    };\n  }\n\n  if (action.type === \"RESET\") {\n    state.gameBoard = initState.gameBoard;\n    state.count = 0;\n    return { ...state\n    };\n  }\n\n  return state;\n}\n\nfunction randomlyChooseFiveShips(board) {\n  const totalShip = 5;\n  let newArray = [];\n\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n\n  while (shipCount !== totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n\n  return board;\n}","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/jingjing-liao-project2 Redux Michael/src/reducers/ComputerBoardReducer.js"],"names":["cloneDeep","initialBoard","initState","count","gameBoard","randomlyChooseFiveShips","computerBoardReducer","state","action","type","value","x","y","copy","board","totalShip","newArray","i","length","push","shipCount","rowPos","Math","floor","random","colPos"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,MAAMC,YAAY,GAAG,CACnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADmB,EAEnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAFmB,EAGnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAHmB,CAArB;AAMA,MAAMC,SAAS,GAAG;AAChBC,EAAAA,KAAK,EAAE,CADS;AAEhBC,EAAAA,SAAS,EAAEC,uBAAuB,CAACJ,YAAD;AAFlB,CAAlB;AAKA,eAAe,SAASK,oBAAT,GAAyD;AAAA,MAA3BC,KAA2B,uEAAnBL,SAAmB;AAAA,MAARM,MAAQ;;AAEtE,MAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAChC,UAAMC,KAAK,GAAGH,KAAK,CAACH,SAAN,CAAgBI,MAAM,CAACG,CAAvB,EAA0BH,MAAM,CAACI,CAAjC,CAAd;;AACA,QAAIF,KAAK,KAAK,MAAd,EAAsB;AACpBH,MAAAA,KAAK,CAACH,SAAN,CAAgBI,MAAM,CAACG,CAAvB,EAA0BH,MAAM,CAACI,CAAjC,IAAsC,GAAtC;AACAL,MAAAA,KAAK,CAACJ,KAAN;AACD,KAHD,MAGO,IAAIO,KAAK,KAAK,EAAd,EAAkB;AACvB,YAAMG,IAAI,GAAGb,SAAS,CAACO,KAAK,CAACH,SAAP,CAAtB;AACAS,MAAAA,IAAI,CAACL,MAAM,CAACG,CAAR,CAAJ,CAAeH,MAAM,CAACI,CAAtB,IAA2B,GAA3B;AACAL,MAAAA,KAAK,CAACH,SAAN,GAAkBS,IAAlB;AACD;;AACD,WAAO,EAAE,GAAGN;AAAL,KAAP;AACD;;AACD,MAAIC,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3BF,IAAAA,KAAK,CAACH,SAAN,GAAkBF,SAAS,CAACE,SAA5B;AACAG,IAAAA,KAAK,CAACJ,KAAN,GAAc,CAAd;AACA,WAAO,EAAE,GAAGI;AAAL,KAAP;AACD;;AACD,SAAOA,KAAP;AACD;;AAED,SAASF,uBAAT,CAAiCS,KAAjC,EAAwC;AACtC,QAAMC,SAAS,GAAG,CAAlB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,IAAAA,QAAQ,CAACG,IAAT,CAAcF,CAAd;AACD;;AAED,MAAIG,SAAS,GAAG,CAAhB;;AACA,SAAOA,SAAS,KAAKL,SAArB,EAAgC;AAC9B,QAAIM,MAAM,GAAGL,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,QAAQ,CAACE,MAApC,CAAD,CAArB;AACA,QAAIO,MAAM,GAAGT,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,QAAQ,CAACE,MAApC,CAAD,CAArB;;AACA,QAAIJ,KAAK,CAACO,MAAD,CAAL,CAAcI,MAAd,MAA0B,EAA9B,EAAkC;AAChCX,MAAAA,KAAK,CAACO,MAAD,CAAL,CAAcI,MAAd,IAAwB,MAAxB;AACAL,MAAAA,SAAS,IAAI,CAAb;AACD;AACF;;AACD,SAAON,KAAP;AACD","sourcesContent":["import { cloneDeep } from \"lodash\";\n\nconst initialBoard = [\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n];\n\nconst initState = {\n  count: 0,\n  gameBoard: randomlyChooseFiveShips(initialBoard),\n};\n\nexport default function computerBoardReducer(state = initState, action) {\n  \n  if (action.type === \"boardClick\") {\n    const value = state.gameBoard[action.x][action.y];\n    if (value === \"Ship\") {\n      state.gameBoard[action.x][action.y] = \"X\";\n      state.count++;\n    } else if (value === \"\") {\n      const copy = cloneDeep(state.gameBoard);\n      copy[action.x][action.y] = \"⚫\";\n      state.gameBoard = copy;\n    }\n    return { ...state };\n  }\n  if (action.type === \"RESET\") {\n    state.gameBoard = initState.gameBoard;\n    state.count = 0;\n    return { ...state };\n  }\n  return state;\n}\n\nfunction randomlyChooseFiveShips(board) {\n  const totalShip = 5;\n  let newArray = [];\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n  while (shipCount !== totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n  return board;\n}\n"]},"metadata":{},"sourceType":"module"}