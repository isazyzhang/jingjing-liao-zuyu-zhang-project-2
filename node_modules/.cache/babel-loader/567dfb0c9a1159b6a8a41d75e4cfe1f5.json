{"ast":null,"code":"var _jsxFileName = \"/Users/jingjing/NEU_Align_CS/CS5610 Web Dev/Jingjing-Liao-project2/jingjing-liao-project2/src/Board.jsx\",\n    _s = $RefreshSig$();\n\nimport ComputerSquare from \"./ComputerSquare\";\nimport HumanSquanre from \"./HumanSquare\";\nimport \"./Board.css\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst totalShip = 5; // let noneDisplay = \"noneDisplay\";\n// let display = \"display\";\n// let computerDisplay = display;\n// let humanDisplay = noneDisplay;\n\nlet turn = 0;\nlet humanCount = 0;\nlet computerCount = 0;\nexport default function Board() {\n  _s();\n\n  while (humanCount != totalShip && computerCount != totalShip) {\n    if (turn === 0) {\n      let computerBoard = randomlyChooseFiveShips([[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]);\n      const [computerBoardState, setComputerBoard] = useState(computerBoard);\n      const computerBoardComponent = [];\n\n      for (let i = 0; i < computerBoardState.length; i++) {\n        let row = computerBoardState[i];\n\n        for (let j = 0; j < row.length; j++) {\n          computerBoardComponent.push( /*#__PURE__*/_jsxDEV(ComputerSquare, {\n            symbol: computerBoardState[i][j],\n            onClick: setComputerBoard,\n            boardState: computerBoardState,\n            x: i,\n            y: j\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 13\n          }, this));\n\n          if (computerBoardState[i][j] === \"X\") {\n            humanCount++;\n          }\n        }\n      }\n\n      turn = 1;\n    } else {\n      let humanBoard = randomlyChooseFiveShips([[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]]);\n      const [humanBoardState, setHumanBoard] = useState(humanBoard);\n      const humanBoardComponent = [];\n\n      for (let i = 0; i < humanBoardState.length; i++) {\n        let row = humanBoardState[i];\n\n        for (let j = 0; j < row.length; j++) {\n          humanBoardComponent.push( /*#__PURE__*/_jsxDEV(HumanSquanre, {\n            symbol: humanBoardState[i][j],\n            onClick: setHumanBoard,\n            boardState: humanBoardState,\n            x: i,\n            y: j\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this));\n\n          if (humanBoardState[i][j] === \"X\") {\n            computerCount++;\n          }\n        }\n      }\n\n      turn = 0;\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"count\",\n      children: [\"Human: \", 5, \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n        class: \"computerCount\",\n        children: [\"Computer: \", 5]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"turn\",\n        children: \"Computer's Turn\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"board\",\n        children: humanBoardComponent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n} // function computerBoard() {\n//   let computerBoard = randomlyChooseFiveShips([\n//     [\"\", \"\", \"\"],\n//     [\"\", \"\", \"\"],\n//     [\"\", \"\", \"\"],\n//   ]);\n//   const [computerBoardState, setComputerBoard] = useState(computerBoard);\n//   const computerBoardComponent = [];\n//   for (let i = 0; i < computerBoardState.length; i++) {\n//     let row = computerBoardState[i];\n//     for (let j = 0; j < row.length; j++) {\n//       computerBoardComponent.push(\n//         <ComputerSquare\n//           symbol={computerBoardState[i][j]}\n//           onClick={setComputerBoard}\n//           boardState={computerBoardState}\n//           x={i}\n//           y={j}\n//         />\n//       );\n//       if (computerBoardState[i][j] === \"X\") {\n//         humanCount++;\n//       }\n//     }\n//   }\n// }\n// function humanBoard() {\n//   let humanBoard = randomlyChooseFiveShips([\n//     [\"\", \"\", \"\"],\n//     [\"\", \"\", \"\"],\n//     [\"\", \"\", \"\"],\n//   ]);\n//   const [humanBoardState, setHumanBoard] = useState(humanBoard);\n//   const humanBoardComponent = [];\n//   for (let i = 0; i < humanBoardState.length; i++) {\n//     let row = humanBoardState[i];\n//     for (let j = 0; j < row.length; j++) {\n//       humanBoardComponent.push(\n//         <HumanSquanre\n//           symbol={humanBoardState[i][j]}\n//           onClick={setHumanBoard}\n//           boardState={humanBoardState}\n//           x={i}\n//           y={j}\n//         />\n//       );\n//       if (humanBoardState[i][j] === \"X\") {\n//         computerCount++;\n//       }\n//     }\n//   }\n// }\n\n_s(Board, \"xJHzVcULXjgOM5HbUAQNGZlyTis=\");\n\n_c = Board;\n\nfunction randomlyChooseFiveShips(board) {\n  let newArray = [];\n\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n\n  while (shipCount != totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n\n  return board;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/CS5610 Web Dev/Jingjing-Liao-project2/jingjing-liao-project2/src/Board.jsx"],"names":["ComputerSquare","HumanSquanre","useState","totalShip","turn","humanCount","computerCount","Board","computerBoard","randomlyChooseFiveShips","computerBoardState","setComputerBoard","computerBoardComponent","i","length","row","j","push","humanBoard","humanBoardState","setHumanBoard","humanBoardComponent","board","newArray","shipCount","rowPos","Math","floor","random","colPos"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAO,aAAP;AACA,SAASC,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,SAAS,GAAG,CAAlB,C,CACA;AACA;AACA;AACA;;AACA,IAAIC,IAAI,GAAG,CAAX;AACA,IAAIC,UAAU,GAAG,CAAjB;AACA,IAAIC,aAAa,GAAG,CAApB;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,SAAOF,UAAU,IAAIF,SAAd,IAA2BG,aAAa,IAAIH,SAAnD,EAA8D;AAC5D,QAAIC,IAAI,KAAK,CAAb,EAAgB;AACd,UAAII,aAAa,GAAGC,uBAAuB,CAAC,CAC1C,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAD0C,EAE1C,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAF0C,EAG1C,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAH0C,CAAD,CAA3C;AAKA,YAAM,CAACC,kBAAD,EAAqBC,gBAArB,IAAyCT,QAAQ,CAACM,aAAD,CAAvD;AAEA,YAAMI,sBAAsB,GAAG,EAA/B;;AAEA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,kBAAkB,CAACI,MAAvC,EAA+CD,CAAC,EAAhD,EAAoD;AAClD,YAAIE,GAAG,GAAGL,kBAAkB,CAACG,CAAD,CAA5B;;AACA,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACD,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACnCJ,UAAAA,sBAAsB,CAACK,IAAvB,eACE,QAAC,cAAD;AACE,YAAA,MAAM,EAAEP,kBAAkB,CAACG,CAAD,CAAlB,CAAsBG,CAAtB,CADV;AAEE,YAAA,OAAO,EAAEL,gBAFX;AAGE,YAAA,UAAU,EAAED,kBAHd;AAIE,YAAA,CAAC,EAAEG,CAJL;AAKE,YAAA,CAAC,EAAEG;AALL;AAAA;AAAA;AAAA;AAAA,kBADF;;AASA,cAAIN,kBAAkB,CAACG,CAAD,CAAlB,CAAsBG,CAAtB,MAA6B,GAAjC,EAAsC;AACpCX,YAAAA,UAAU;AACX;AACF;AACF;;AACDD,MAAAA,IAAI,GAAG,CAAP;AACD,KA5BD,MA4BO;AACL,UAAIc,UAAU,GAAGT,uBAAuB,CAAC,CACvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADuC,EAEvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAFuC,EAGvC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAHuC,CAAD,CAAxC;AAKA,YAAM,CAACU,eAAD,EAAkBC,aAAlB,IAAmClB,QAAQ,CAACgB,UAAD,CAAjD;AAEA,YAAMG,mBAAmB,GAAG,EAA5B;;AAEA,WAAK,IAAIR,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,eAAe,CAACL,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,YAAIE,GAAG,GAAGI,eAAe,CAACN,CAAD,CAAzB;;AACA,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACD,MAAxB,EAAgCE,CAAC,EAAjC,EAAqC;AACnCK,UAAAA,mBAAmB,CAACJ,IAApB,eACE,QAAC,YAAD;AACE,YAAA,MAAM,EAAEE,eAAe,CAACN,CAAD,CAAf,CAAmBG,CAAnB,CADV;AAEE,YAAA,OAAO,EAAEI,aAFX;AAGE,YAAA,UAAU,EAAED,eAHd;AAIE,YAAA,CAAC,EAAEN,CAJL;AAKE,YAAA,CAAC,EAAEG;AALL;AAAA;AAAA;AAAA;AAAA,kBADF;;AASA,cAAIG,eAAe,CAACN,CAAD,CAAf,CAAmBG,CAAnB,MAA0B,GAA9B,EAAmC;AACjCV,YAAAA,aAAa;AACd;AACF;AACF;;AACDF,MAAAA,IAAI,GAAG,CAAP;AACD;AACF;;AAED,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA,4BACU,CADV,oBACa;AAAM,QAAA,KAAK,EAAC,eAAZ;AAAA,iCAAuC,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA,cADb;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAA,8BACE;AAAK,QAAA,KAAK,EAAC,MAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,EAAE,EAAC,OAAR;AAAA,kBAAiBiB;AAAjB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GAxIwBd,K;;KAAAA,K;;AA0IxB,SAASE,uBAAT,CAAiCa,KAAjC,EAAwC;AACtC,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIV,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,KAAK,CAACR,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCU,IAAAA,QAAQ,CAACN,IAAT,CAAcJ,CAAd;AACD;;AAED,MAAIW,SAAS,GAAG,CAAhB;;AACA,SAAOA,SAAS,IAAIrB,SAApB,EAA+B;AAC7B,QAAIsB,MAAM,GAAGF,QAAQ,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACT,MAApC,CAAD,CAArB;AACA,QAAIe,MAAM,GAAGN,QAAQ,CAACG,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,QAAQ,CAACT,MAApC,CAAD,CAArB;;AACA,QAAIQ,KAAK,CAACG,MAAD,CAAL,CAAcI,MAAd,MAA0B,EAA9B,EAAkC;AAChCP,MAAAA,KAAK,CAACG,MAAD,CAAL,CAAcI,MAAd,IAAwB,MAAxB;AACAL,MAAAA,SAAS,IAAI,CAAb;AACD;AACF;;AACD,SAAOF,KAAP;AACD","sourcesContent":["import ComputerSquare from \"./ComputerSquare\";\nimport HumanSquanre from \"./HumanSquare\";\nimport \"./Board.css\";\nimport { useState } from \"react\";\n\nconst totalShip = 5;\n// let noneDisplay = \"noneDisplay\";\n// let display = \"display\";\n// let computerDisplay = display;\n// let humanDisplay = noneDisplay;\nlet turn = 0;\nlet humanCount = 0;\nlet computerCount = 0;\n\nexport default function Board() {\n  while (humanCount != totalShip && computerCount != totalShip) {\n    if (turn === 0) {\n      let computerBoard = randomlyChooseFiveShips([\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n      ]);\n      const [computerBoardState, setComputerBoard] = useState(computerBoard);\n\n      const computerBoardComponent = [];\n\n      for (let i = 0; i < computerBoardState.length; i++) {\n        let row = computerBoardState[i];\n        for (let j = 0; j < row.length; j++) {\n          computerBoardComponent.push(\n            <ComputerSquare\n              symbol={computerBoardState[i][j]}\n              onClick={setComputerBoard}\n              boardState={computerBoardState}\n              x={i}\n              y={j}\n            />\n          );\n          if (computerBoardState[i][j] === \"X\") {\n            humanCount++;\n          }\n        }\n      }\n      turn = 1;\n    } else {\n      let humanBoard = randomlyChooseFiveShips([\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n      ]);\n      const [humanBoardState, setHumanBoard] = useState(humanBoard);\n\n      const humanBoardComponent = [];\n\n      for (let i = 0; i < humanBoardState.length; i++) {\n        let row = humanBoardState[i];\n        for (let j = 0; j < row.length; j++) {\n          humanBoardComponent.push(\n            <HumanSquanre\n              symbol={humanBoardState[i][j]}\n              onClick={setHumanBoard}\n              boardState={humanBoardState}\n              x={i}\n              y={j}\n            />\n          );\n          if (humanBoardState[i][j] === \"X\") {\n            computerCount++;\n          }\n        }\n      }\n      turn = 0;\n    }\n  }\n\n  return (\n    <div>\n      <div class=\"count\">\n        Human: {5} <span class=\"computerCount\">Computer: {5}</span>\n      </div>\n\n      {/* <div>\n        <div class=\"turn\">Human's Turn</div>\n        <div id=\"board\">{computerBoardComponent}</div>\n      </div> */}\n\n      <div>\n        <div class=\"turn\">Computer's Turn</div>\n        <div id=\"board\">{humanBoardComponent}</div>\n      </div>\n    </div>\n  );\n}\n\n// function computerBoard() {\n//   let computerBoard = randomlyChooseFiveShips([\n//     [\"\", \"\", \"\"],\n//     [\"\", \"\", \"\"],\n//     [\"\", \"\", \"\"],\n//   ]);\n//   const [computerBoardState, setComputerBoard] = useState(computerBoard);\n\n//   const computerBoardComponent = [];\n\n//   for (let i = 0; i < computerBoardState.length; i++) {\n//     let row = computerBoardState[i];\n//     for (let j = 0; j < row.length; j++) {\n//       computerBoardComponent.push(\n//         <ComputerSquare\n//           symbol={computerBoardState[i][j]}\n//           onClick={setComputerBoard}\n//           boardState={computerBoardState}\n//           x={i}\n//           y={j}\n//         />\n//       );\n//       if (computerBoardState[i][j] === \"X\") {\n//         humanCount++;\n//       }\n//     }\n//   }\n// }\n\n// function humanBoard() {\n//   let humanBoard = randomlyChooseFiveShips([\n//     [\"\", \"\", \"\"],\n//     [\"\", \"\", \"\"],\n//     [\"\", \"\", \"\"],\n//   ]);\n//   const [humanBoardState, setHumanBoard] = useState(humanBoard);\n\n//   const humanBoardComponent = [];\n\n//   for (let i = 0; i < humanBoardState.length; i++) {\n//     let row = humanBoardState[i];\n//     for (let j = 0; j < row.length; j++) {\n//       humanBoardComponent.push(\n//         <HumanSquanre\n//           symbol={humanBoardState[i][j]}\n//           onClick={setHumanBoard}\n//           boardState={humanBoardState}\n//           x={i}\n//           y={j}\n//         />\n//       );\n//       if (humanBoardState[i][j] === \"X\") {\n//         computerCount++;\n//       }\n//     }\n//   }\n// }\n\nfunction randomlyChooseFiveShips(board) {\n  let newArray = [];\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n  while (shipCount != totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n  return board;\n}\n"]},"metadata":{},"sourceType":"module"}