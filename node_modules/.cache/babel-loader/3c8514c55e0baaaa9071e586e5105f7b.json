{"ast":null,"code":"const initialBoard = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]];\nconst defaultState = randomlyChooseFiveShips(initialBoard); // function generateGameBoard() {\n//     const defaultState = {\n//         count: 0,\n//         gameBoard: initialBoard\n//     }\n//     defaultState.gameBoard = randomlyChooseFiveShips(initialBoard)\n//     return defaultState.gameBoard;\n// }\n\nexport default function gameReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  // if (state === undefined) {\n  //     return generateGameBoard()\n  // }\n  if (action.type === \"boardClick\") {\n    const value = state[action.x][action.y];\n\n    if (value === \"Ship\") {\n      state[action.x][action.y] = \"X\";\n    } else if (value === \"\") {\n      state[action.x][action.y] = \"✓\";\n    }\n\n    return [...state];\n  }\n\n  if (action.type === 'RESET') {\n    const newBoard = randomlyChooseFiveShips(initialBoard);\n\n    for (let i = 0; i < state.length; i++) {\n      for (let j = 0; j < state.length; j++) {\n        state[i][j] = newBoard[i][j];\n      }\n    }\n\n    return [...state];\n  }\n\n  return state;\n}\n\nfunction randomlyChooseFiveShips(board) {\n  const totalShip = 5;\n  let newArray = [];\n\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n\n  while (shipCount !== totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n\n  return board;\n}","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/CS5610 Web Dev/Jingjing-Liao-project2/jingjing-liao-project2 Redux copy/src/reducers/gameReducer.js"],"names":["initialBoard","defaultState","randomlyChooseFiveShips","gameReducer","state","action","type","value","x","y","newBoard","i","length","j","board","totalShip","newArray","push","shipCount","rowPos","Math","floor","random","colPos"],"mappings":"AACA,MAAMA,YAAY,GAAG,CACjB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADiB,EAEjB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAFiB,EAGjB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAHiB,CAArB;AAME,MAAMC,YAAY,GAAGC,uBAAuB,CAACF,YAAD,CAA5C,C,CAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASG,WAAT,GAAmD;AAAA,MAA9BC,KAA8B,uEAAtBH,YAAsB;AAAA,MAARI,MAAQ;;AAC9D;AACA;AACA;AACA,MAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;AAC9B,UAAMC,KAAK,GAAGH,KAAK,CAACC,MAAM,CAACG,CAAR,CAAL,CAAgBH,MAAM,CAACI,CAAvB,CAAd;;AACA,QAAIF,KAAK,KAAK,MAAd,EAAsB;AAClBH,MAAAA,KAAK,CAACC,MAAM,CAACG,CAAR,CAAL,CAAgBH,MAAM,CAACI,CAAvB,IAA4B,GAA5B;AACH,KAFD,MAEO,IAAIF,KAAK,KAAK,EAAd,EAAkB;AACrBH,MAAAA,KAAK,CAACC,MAAM,CAACG,CAAR,CAAL,CAAgBH,MAAM,CAACI,CAAvB,IAA4B,GAA5B;AACH;;AACD,WAAO,CAAC,GAAGL,KAAJ,CAAP;AACH;;AACD,MAAIC,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AACzB,UAAMI,QAAQ,GAAGR,uBAAuB,CAACF,YAAD,CAAxC;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACQ,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACnC,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACQ,MAA1B,EAAkCC,CAAC,EAAnC,EAAsC;AAClCT,QAAAA,KAAK,CAACO,CAAD,CAAL,CAASE,CAAT,IAAcH,QAAQ,CAACC,CAAD,CAAR,CAAYE,CAAZ,CAAd;AACH;AACJ;;AACD,WAAO,CAAC,GAAGT,KAAJ,CAAP;AACH;;AACD,SAAOA,KAAP;AAEH;;AAED,SAASF,uBAAT,CAAiCY,KAAjC,EAAwC;AACpC,QAAMC,SAAS,GAAG,CAAlB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,KAAK,CAACF,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCK,IAAAA,QAAQ,CAACC,IAAT,CAAcN,CAAd;AACD;;AAED,MAAIO,SAAS,GAAG,CAAhB;;AACA,SAAOA,SAAS,KAAKH,SAArB,EAAgC;AAC9B,QAAII,MAAM,GAAGH,QAAQ,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,QAAQ,CAACJ,MAApC,CAAD,CAArB;AACA,QAAIW,MAAM,GAAGP,QAAQ,CAACI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,QAAQ,CAACJ,MAApC,CAAD,CAArB;;AACA,QAAIE,KAAK,CAACK,MAAD,CAAL,CAAcI,MAAd,MAA0B,EAA9B,EAAkC;AAChCT,MAAAA,KAAK,CAACK,MAAD,CAAL,CAAcI,MAAd,IAAwB,MAAxB;AACAL,MAAAA,SAAS,IAAI,CAAb;AACD;AACF;;AACD,SAAOJ,KAAP;AACD","sourcesContent":["\nconst initialBoard = [\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n  ]\n\n  const defaultState = randomlyChooseFiveShips(initialBoard)\n\n// function generateGameBoard() {\n//     const defaultState = {\n//         count: 0,\n//         gameBoard: initialBoard\n//     }\n//     defaultState.gameBoard = randomlyChooseFiveShips(initialBoard)\n//     return defaultState.gameBoard;\n// }\n\nexport default function gameReducer(state = defaultState, action) {\n    // if (state === undefined) {\n    //     return generateGameBoard()\n    // }\n    if (action.type === \"boardClick\") {\n        const value = state[action.x][action.y]\n        if (value === \"Ship\") {\n            state[action.x][action.y] = \"X\"\n        } else if (value === \"\") {\n            state[action.x][action.y] = \"✓\"\n        }\n        return [...state]\n    }\n    if (action.type === 'RESET') {\n        const newBoard = randomlyChooseFiveShips(initialBoard)\n        for (let i = 0; i < state.length; i++) {\n            for (let j = 0; j < state.length; j++){\n                state[i][j] = newBoard[i][j];\n            }\n        }\n        return [...state];\n    }\n    return state;\n\n}\n\nfunction randomlyChooseFiveShips(board) {\n    const totalShip = 5;\n    let newArray = [];\n    for (let i = 0; i < board.length; i++) {\n      newArray.push(i);\n    }\n  \n    let shipCount = 0;\n    while (shipCount !== totalShip) {\n      let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n      let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n      if (board[rowPos][colPos] === \"\") {\n        board[rowPos][colPos] = \"Ship\";\n        shipCount += 1;\n      }\n    }\n    return board;\n  }"]},"metadata":{},"sourceType":"module"}