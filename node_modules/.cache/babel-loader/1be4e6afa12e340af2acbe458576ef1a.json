{"ast":null,"code":"import { cloneDeep } from \"lodash\";\nimport { randomlyChooseFiveShips } from \"./reducerUtils\";\nexport default function humanBoardReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return function () {\n    const initialBoard = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]];\n    const initialState = {\n      count: 0,\n      board: randomlyChooseFiveShips(initialBoard)\n    };\n\n    if (state === undefined) {\n      return initialState;\n    }\n\n    switch (action.type) {\n      case \"ComputerClickSquare\":\n        {\n          const value = state.board[action.x][action.y];\n\n          if (value === \"Ship\") {\n            state.board[action.x][action.y] = \"X\";\n            state.count++;\n          } else if (value === \"\") {\n            // TODO: There is a library called immutable for React. Try it.\n            const copy = cloneDeep(state.board);\n            copy[action.x][action.y] = \"✓\";\n            state.board = copy;\n          }\n\n          return { ...state\n          };\n        }\n\n      case \"RESET\":\n        {// const newBoard = initialState.board;\n          // state.board = newBoard;\n          // state.count = 0;\n          // return { ...state };\n          // return {\n          //   count: 0,\n          //   board: randomlyChooseFiveShips(initialBoard),\n          // };\n        }\n\n      default:\n        return state;\n    }\n  }();\n}","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/jingjing-liao-project2 Redux Michael/src/reducers/HumanBoardReducer.js"],"names":["cloneDeep","randomlyChooseFiveShips","humanBoardReducer","state","initialState","action","initialBoard","count","board","undefined","type","value","x","y","copy"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AACA,SAASC,uBAAT,QAAwC,gBAAxC;AAEA,eAAe,SAASC,iBAAT;AAAA,MAA2BC,KAA3B,uEAAmCC,YAAnC;AAAA,MAAiDC,MAAjD;AAAA,qBAAyD;AACtE,UAAMC,YAAY,GAAG,CACnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADmB,EAEnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAFmB,EAGnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAHmB,CAArB;AAMA,UAAMF,YAAY,GAAG;AACnBG,MAAAA,KAAK,EAAE,CADY;AAEnBC,MAAAA,KAAK,EAAEP,uBAAuB,CAACK,YAAD;AAFX,KAArB;;AAKA,QAAIH,KAAK,KAAKM,SAAd,EAAyB;AACvB,aAAOL,YAAP;AACD;;AAED,YAAQC,MAAM,CAACK,IAAf;AACE,WAAK,qBAAL;AAA4B;AAC1B,gBAAMC,KAAK,GAAGR,KAAK,CAACK,KAAN,CAAYH,MAAM,CAACO,CAAnB,EAAsBP,MAAM,CAACQ,CAA7B,CAAd;;AACA,cAAIF,KAAK,KAAK,MAAd,EAAsB;AACpBR,YAAAA,KAAK,CAACK,KAAN,CAAYH,MAAM,CAACO,CAAnB,EAAsBP,MAAM,CAACQ,CAA7B,IAAkC,GAAlC;AACAV,YAAAA,KAAK,CAACI,KAAN;AACD,WAHD,MAGO,IAAII,KAAK,KAAK,EAAd,EAAkB;AACvB;AACA,kBAAMG,IAAI,GAAGd,SAAS,CAACG,KAAK,CAACK,KAAP,CAAtB;AACAM,YAAAA,IAAI,CAACT,MAAM,CAACO,CAAR,CAAJ,CAAeP,MAAM,CAACQ,CAAtB,IAA2B,GAA3B;AACAV,YAAAA,KAAK,CAACK,KAAN,GAAcM,IAAd;AACD;;AACD,iBAAO,EAAE,GAAGX;AAAL,WAAP;AACD;;AACD,WAAK,OAAL;AAAc,SACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AACD;AACE,eAAOA,KAAP;AAzBJ;AA2BD,GA3Cc;AAAA","sourcesContent":["import { cloneDeep } from \"lodash\";\nimport { randomlyChooseFiveShips } from \"./reducerUtils\";\n\nexport default function humanBoardReducer(state = initialState, action) {\n  const initialBoard = [\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n    [\"\", \"\", \"\"],\n  ];\n  \n  const initialState = {\n    count: 0,\n    board: randomlyChooseFiveShips(initialBoard),\n  };\n  \n  if (state === undefined) {\n    return initialState;\n  }\n  \n  switch (action.type) {\n    case \"ComputerClickSquare\": {\n      const value = state.board[action.x][action.y];\n      if (value === \"Ship\") {\n        state.board[action.x][action.y] = \"X\";\n        state.count++;\n      } else if (value === \"\") {\n        // TODO: There is a library called immutable for React. Try it.\n        const copy = cloneDeep(state.board);\n        copy[action.x][action.y] = \"✓\";\n        state.board = copy;\n      }\n      return { ...state };\n    }\n    case \"RESET\": {\n      // const newBoard = initialState.board;\n      // state.board = newBoard;\n      // state.count = 0;\n      // return { ...state };\n      // return {\n      //   count: 0,\n      //   board: randomlyChooseFiveShips(initialBoard),\n      // };\n    }\n    default:\n      return state;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}