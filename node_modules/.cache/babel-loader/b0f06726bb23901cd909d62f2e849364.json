{"ast":null,"code":"export default function gameReducer(state, action) {\n  const initialBoard = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]];\n  const defaultState = {\n    count: 0 // gameBoard: randomlyChooseFiveShips(initialBoard)\n\n  };\n\n  if (state === undefined) {\n    return defaultState;\n  }\n\n  if (action.type === \"boardClick\") {\n    const value = state.gameBoard[action.x][action.y];\n    console.log(value);\n\n    if (value === \"Ship\") {\n      state.gameBoard[action.x][action.y] = \"X\";\n      state.count++;\n    } else if (value === \"\") {\n      state.gameBoard[action.x][action.y] = \"✓\";\n      console.log(state.gameBoard[action.x][action.y]);\n    }\n\n    return { ...state\n    };\n  } // if (action.type === 'RESET') {\n  //     const newBoard = randomlyChooseFiveShips(initialBoard)\n  //     for (let i = 0; i < state.gameBoard.length; i++) {\n  //         for (let j = 0; j < state.gameBoard.length; j++){\n  //             state.gameBoard[i][j] = newBoard[i][j];\n  //         }\n  //     }\n  //     state.count = 0\n  //     return {...state};\n  // }\n\n\n  return state;\n}\n\nfunction randomlyChooseFiveShips(board) {\n  const totalShip = 5;\n  let newArray = [];\n\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n\n  while (shipCount !== totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n\n  return board;\n}","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/CS5610 Web Dev/Jingjing-Liao-project2/jingjing-liao-project2 Redux copy/src/reducers/gameReducer.js"],"names":["gameReducer","state","action","initialBoard","defaultState","count","undefined","type","value","gameBoard","x","y","console","log","randomlyChooseFiveShips","board","totalShip","newArray","i","length","push","shipCount","rowPos","Math","floor","random","colPos"],"mappings":"AAAA,eAAe,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAC/C,QAAMC,YAAY,GAAG,CACjB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADiB,EAEjB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAFiB,EAGjB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAHiB,CAArB;AAMA,QAAMC,YAAY,GAAG;AACjBC,IAAAA,KAAK,EAAE,CADU,CAEjB;;AAFiB,GAArB;;AAKA,MAAIJ,KAAK,KAAKK,SAAd,EAAyB;AACrB,WAAOF,YAAP;AACH;;AACD,MAAIF,MAAM,CAACK,IAAP,KAAgB,YAApB,EAAkC;AAC9B,UAAMC,KAAK,GAAGP,KAAK,CAACQ,SAAN,CAAgBP,MAAM,CAACQ,CAAvB,EAA0BR,MAAM,CAACS,CAAjC,CAAd;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,KAAZ;;AACA,QAAIA,KAAK,KAAK,MAAd,EAAsB;AAClBP,MAAAA,KAAK,CAACQ,SAAN,CAAgBP,MAAM,CAACQ,CAAvB,EAA0BR,MAAM,CAACS,CAAjC,IAAsC,GAAtC;AACAV,MAAAA,KAAK,CAACI,KAAN;AACH,KAHD,MAGO,IAAIG,KAAK,KAAK,EAAd,EAAkB;AACrBP,MAAAA,KAAK,CAACQ,SAAN,CAAgBP,MAAM,CAACQ,CAAvB,EAA0BR,MAAM,CAACS,CAAjC,IAAsC,GAAtC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACQ,SAAN,CAAgBP,MAAM,CAACQ,CAAvB,EAA0BR,MAAM,CAACS,CAAjC,CAAZ;AACH;;AACD,WAAO,EAAC,GAAGV;AAAJ,KAAP;AACH,GA1B8C,CA2B/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAOA,KAAP;AAEH;;AAED,SAASa,uBAAT,CAAiCC,KAAjC,EAAwC;AACpC,QAAMC,SAAS,GAAG,CAAlB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,IAAAA,QAAQ,CAACG,IAAT,CAAcF,CAAd;AACD;;AAED,MAAIG,SAAS,GAAG,CAAhB;;AACA,SAAOA,SAAS,KAAKL,SAArB,EAAgC;AAC9B,QAAIM,MAAM,GAAGL,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,QAAQ,CAACE,MAApC,CAAD,CAArB;AACA,QAAIO,MAAM,GAAGT,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,QAAQ,CAACE,MAApC,CAAD,CAArB;;AACA,QAAIJ,KAAK,CAACO,MAAD,CAAL,CAAcI,MAAd,MAA0B,EAA9B,EAAkC;AAChCX,MAAAA,KAAK,CAACO,MAAD,CAAL,CAAcI,MAAd,IAAwB,MAAxB;AACAL,MAAAA,SAAS,IAAI,CAAb;AACD;AACF;;AACD,SAAON,KAAP;AACD","sourcesContent":["export default function gameReducer(state, action) {\n    const initialBoard = [\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n        [\"\", \"\", \"\"],\n      ]\n\n    const defaultState = {\n        count: 0,\n        // gameBoard: randomlyChooseFiveShips(initialBoard)\n    }\n    \n    if (state === undefined) {\n        return defaultState;\n    }\n    if (action.type === \"boardClick\") {\n        const value = state.gameBoard[action.x][action.y]\n        console.log(value)\n        if (value === \"Ship\") {\n            state.gameBoard[action.x][action.y] = \"X\"\n            state.count++\n        } else if (value === \"\") {\n            state.gameBoard[action.x][action.y] = \"✓\"\n            console.log(state.gameBoard[action.x][action.y])\n        }\n        return {...state}\n    }\n    // if (action.type === 'RESET') {\n    //     const newBoard = randomlyChooseFiveShips(initialBoard)\n    //     for (let i = 0; i < state.gameBoard.length; i++) {\n    //         for (let j = 0; j < state.gameBoard.length; j++){\n    //             state.gameBoard[i][j] = newBoard[i][j];\n    //         }\n    //     }\n    //     state.count = 0\n    //     return {...state};\n    // }\n    return state;\n\n}\n\nfunction randomlyChooseFiveShips(board) {\n    const totalShip = 5;\n    let newArray = [];\n    for (let i = 0; i < board.length; i++) {\n      newArray.push(i);\n    }\n  \n    let shipCount = 0;\n    while (shipCount !== totalShip) {\n      let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n      let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n      if (board[rowPos][colPos] === \"\") {\n        board[rowPos][colPos] = \"Ship\";\n        shipCount += 1;\n      }\n    }\n    return board;\n  }"]},"metadata":{},"sourceType":"module"}