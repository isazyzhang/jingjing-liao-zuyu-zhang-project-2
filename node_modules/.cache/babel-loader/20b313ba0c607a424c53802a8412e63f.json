{"ast":null,"code":"import { cloneDeep } from \"lodash\";\nconst initialBoard = [[\"\", \"\", \"\"], [\"\", \"\", \"\"], [\"\", \"\", \"\"]];\nconst initialState = {\n  count: 0,\n  gameBoard: randomlyChooseFiveShips(initialBoard)\n};\nexport default function humanBoardReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"computerBoardClick\":\n      {\n        const value = state.gameBoard[action.x][action.y];\n\n        if (value === \"Ship\") {\n          state.gameBoard[action.x][action.y] = \"X\";\n          state.count++;\n        } else if (value === \"\") {\n          // TODO: There is a library called immutable for React. Try it.\n          const copy = cloneDeep(state.gameBoard);\n          copy[action.x][action.y] = \"✓\";\n          state.gameBoard = copy;\n        }\n\n        return { ...state\n        };\n      }\n  }\n\n  if (action.type === \"RESET\") {\n    state.gameBoard = defaultState.gameBoard;\n    state.count = 0;\n    return { ...state\n    };\n  }\n\n  return state;\n}\n\nfunction randomlyChooseFiveShips(board) {\n  const totalShip = 5;\n  let newArray = [];\n\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n\n  while (shipCount !== totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n\n  return board;\n}","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/jingjing-liao-project2 Redux Michael/src/reducers/gameReducer.js"],"names":["cloneDeep","initialBoard","initialState","count","gameBoard","randomlyChooseFiveShips","humanBoardReducer","state","action","type","value","x","y","copy","defaultState","board","totalShip","newArray","i","length","push","shipCount","rowPos","Math","floor","random","colPos"],"mappings":"AAAA,SAASA,SAAT,QAA0B,QAA1B;AAEA,MAAMC,YAAY,GAAG,CACnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CADmB,EAEnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAFmB,EAGnB,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CAHmB,CAArB;AAMA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,SAAS,EAAEC,uBAAuB,CAACJ,YAAD;AAFf,CAArB;AAKA,eAAe,SAASK,iBAAT,GAAyD;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AACtE,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,oBAAL;AAA2B;AACzB,cAAMC,KAAK,GAAGH,KAAK,CAACH,SAAN,CAAgBI,MAAM,CAACG,CAAvB,EAA0BH,MAAM,CAACI,CAAjC,CAAd;;AACA,YAAIF,KAAK,KAAK,MAAd,EAAsB;AACpBH,UAAAA,KAAK,CAACH,SAAN,CAAgBI,MAAM,CAACG,CAAvB,EAA0BH,MAAM,CAACI,CAAjC,IAAsC,GAAtC;AACAL,UAAAA,KAAK,CAACJ,KAAN;AACD,SAHD,MAGO,IAAIO,KAAK,KAAK,EAAd,EAAkB;AACvB;AACA,gBAAMG,IAAI,GAAGb,SAAS,CAACO,KAAK,CAACH,SAAP,CAAtB;AACAS,UAAAA,IAAI,CAACL,MAAM,CAACG,CAAR,CAAJ,CAAeH,MAAM,CAACI,CAAtB,IAA2B,GAA3B;AACAL,UAAAA,KAAK,CAACH,SAAN,GAAkBS,IAAlB;AACD;;AACD,eAAO,EAAE,GAAGN;AAAL,SAAP;AACD;AAbH;;AAeA,MAAIC,MAAM,CAACC,IAAP,KAAgB,OAApB,EAA6B;AAC3BF,IAAAA,KAAK,CAACH,SAAN,GAAkBU,YAAY,CAACV,SAA/B;AACAG,IAAAA,KAAK,CAACJ,KAAN,GAAc,CAAd;AACA,WAAO,EAAE,GAAGI;AAAL,KAAP;AACD;;AACD,SAAOA,KAAP;AACD;;AAED,SAASF,uBAAT,CAAiCU,KAAjC,EAAwC;AACtC,QAAMC,SAAS,GAAG,CAAlB;AACA,MAAIC,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACI,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,IAAAA,QAAQ,CAACG,IAAT,CAAcF,CAAd;AACD;;AAED,MAAIG,SAAS,GAAG,CAAhB;;AACA,SAAOA,SAAS,KAAKL,SAArB,EAAgC;AAC9B,QAAIM,MAAM,GAAGL,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,QAAQ,CAACE,MAApC,CAAD,CAArB;AACA,QAAIO,MAAM,GAAGT,QAAQ,CAACM,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBR,QAAQ,CAACE,MAApC,CAAD,CAArB;;AACA,QAAIJ,KAAK,CAACO,MAAD,CAAL,CAAcI,MAAd,MAA0B,EAA9B,EAAkC;AAChCX,MAAAA,KAAK,CAACO,MAAD,CAAL,CAAcI,MAAd,IAAwB,MAAxB;AACAL,MAAAA,SAAS,IAAI,CAAb;AACD;AACF;;AACD,SAAON,KAAP;AACD","sourcesContent":["import { cloneDeep } from \"lodash\";\n\nconst initialBoard = [\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n  [\"\", \"\", \"\"],\n];\n\nconst initialState = {\n  count: 0,\n  gameBoard: randomlyChooseFiveShips(initialBoard),\n};\n\nexport default function humanBoardReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"computerBoardClick\": {\n      const value = state.gameBoard[action.x][action.y];\n      if (value === \"Ship\") {\n        state.gameBoard[action.x][action.y] = \"X\";\n        state.count++;\n      } else if (value === \"\") {\n        // TODO: There is a library called immutable for React. Try it.\n        const copy = cloneDeep(state.gameBoard);\n        copy[action.x][action.y] = \"✓\";\n        state.gameBoard = copy;\n      }\n      return { ...state };\n    }\n  }\n  if (action.type === \"RESET\") {\n    state.gameBoard = defaultState.gameBoard;\n    state.count = 0;\n    return { ...state };\n  }\n  return state;\n}\n\nfunction randomlyChooseFiveShips(board) {\n  const totalShip = 5;\n  let newArray = [];\n  for (let i = 0; i < board.length; i++) {\n    newArray.push(i);\n  }\n\n  let shipCount = 0;\n  while (shipCount !== totalShip) {\n    let rowPos = newArray[Math.floor(Math.random() * newArray.length)];\n    let colPos = newArray[Math.floor(Math.random() * newArray.length)];\n    if (board[rowPos][colPos] === \"\") {\n      board[rowPos][colPos] = \"Ship\";\n      shipCount += 1;\n    }\n  }\n  return board;\n}\n"]},"metadata":{},"sourceType":"module"}