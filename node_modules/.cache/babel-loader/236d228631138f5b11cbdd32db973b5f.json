{"ast":null,"code":"var _jsxFileName = \"/Users/jingjing/NEU_Align_CS/jingjing-liao-project2 Redux Michael/src/FreePlayBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport ComputerSquare from \"./ComputerSquare\";\nimport \"./FreePlayBoard.css\";\nimport { useSelector } from \"react-redux\";\nimport ResetButton from \"./ResetButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Board() {\n  _s();\n\n  const humanClickCount = useSelector(state => state.computerBoard.count);\n  const totalShips = 5;\n  let winner = \"\";\n\n  if (humanClickCount === totalShips) {\n    winner = \"Game Over! You Won!\";\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"count\",\n      children: [\"Score: \", humanClickCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"count\",\n      children: turn === 0 ? \"Human's Turn\" : \"Computer's Turn\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"winner\",\n      children: [winner, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), turn === 0 ? /*#__PURE__*/_jsxDEV(ComputerBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(HumanBoard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 41\n    }, this), /*#__PURE__*/_jsxDEV(ResetButton, {\n      text: \"Reset The Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this); // const computerBoardState = useSelector((state) => state.computerBoard.board);\n  // const clickCount = useSelector((state) => state.computerBoard.count);\n  // const computerBoardComponent = [];\n  // const totalShips = 5;\n  // let winner = \"\";\n  // for (let i = 0; i < computerBoardState.length; i++) {\n  //   let row = computerBoardState[i];\n  //   for (let j = 0; j < row.length; j++) {\n  //     computerBoardComponent.push(\n  //       <ComputerSquare symbol={computerBoardState[i][j]} x={i} y={j} />\n  //     );\n  //   }\n  // }\n  // if (clickCount === totalShips) {\n  //   winner = \"Game Over! You Won!\";\n  // }\n  // return (\n  //   <div>\n  //     <div class=\"count\">Your Score: {clickCount} </div>\n  //     <div class=\"winner\">{winner} </div>\n  //     <div id=\"board\">{computerBoardComponent}</div>\n  //     <ResetButton text=\"Reset The Game\" />\n  //   </div>\n  // );\n}\n\n_s(Board, \"XBHdrF8ivj1MegAcoGijU/036yI=\", false, function () {\n  return [useSelector];\n});\n\n_c = Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/Users/jingjing/NEU_Align_CS/jingjing-liao-project2 Redux Michael/src/FreePlayBoard.jsx"],"names":["ComputerSquare","useSelector","ResetButton","Board","humanClickCount","state","computerBoard","count","totalShips","winner","turn"],"mappings":";;;AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,OAAO,qBAAP;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,WAAP,MAAwB,eAAxB;;AAEA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAC9B,QAAMC,eAAe,GAAGH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACC,aAAN,CAAoBC,KAAhC,CAAnC;AACA,QAAMC,UAAU,GAAG,CAAnB;AACA,MAAIC,MAAM,GAAG,EAAb;;AACA,MAAIL,eAAe,KAAKI,UAAxB,EAAoC;AAClCC,IAAAA,MAAM,GAAG,qBAAT;AACD;;AAED,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA,4BACUL,eADV;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,KAAK,EAAC,OAAX;AAAA,gBAAoBM,IAAI,KAAK,CAAT,GAAa,cAAb,GAA8B;AAAlD;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAK,MAAA,KAAK,EAAC,QAAX;AAAA,iBAAqBD,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,EAMGC,IAAI,KAAK,CAAT,gBAAa,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,YAAb,gBAAiC,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,YANpC,eAQE,QAAC,WAAD;AAAa,MAAA,IAAI,EAAC;AAAlB;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CAR8B,CAqB9B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;GAjDuBP,K;UACEF,W;;;KADFE,K","sourcesContent":["import ComputerSquare from \"./ComputerSquare\";\nimport \"./FreePlayBoard.css\";\nimport { useSelector } from \"react-redux\";\nimport ResetButton from \"./ResetButton\";\n\nexport default function Board() {\n  const humanClickCount = useSelector((state) => state.computerBoard.count);\n  const totalShips = 5;\n  let winner = \"\";\n  if (humanClickCount === totalShips) {\n    winner = \"Game Over! You Won!\";\n  }\n\n  return (\n    <div>\n      <div class=\"count\">\n        Score: {humanClickCount}\n      </div>\n      <div class=\"count\">{turn === 0 ? \"Human's Turn\" : \"Computer's Turn\"}</div>\n      <div class=\"winner\">{winner} </div>\n      {turn === 0 ? <ComputerBoard /> : <HumanBoard />}\n\n      <ResetButton text=\"Reset The Game\" />\n    </div>\n  );\n\n  // const computerBoardState = useSelector((state) => state.computerBoard.board);\n  // const clickCount = useSelector((state) => state.computerBoard.count);\n\n  // const computerBoardComponent = [];\n  // const totalShips = 5;\n  // let winner = \"\";\n\n  // for (let i = 0; i < computerBoardState.length; i++) {\n  //   let row = computerBoardState[i];\n  //   for (let j = 0; j < row.length; j++) {\n  //     computerBoardComponent.push(\n  //       <ComputerSquare symbol={computerBoardState[i][j]} x={i} y={j} />\n  //     );\n  //   }\n  // }\n\n  // if (clickCount === totalShips) {\n  //   winner = \"Game Over! You Won!\";\n  // }\n\n  // return (\n  //   <div>\n  //     <div class=\"count\">Your Score: {clickCount} </div>\n  //     <div class=\"winner\">{winner} </div>\n  //     <div id=\"board\">{computerBoardComponent}</div>\n  //     <ResetButton text=\"Reset The Game\" />\n  //   </div>\n  // );\n}\n"]},"metadata":{},"sourceType":"module"}